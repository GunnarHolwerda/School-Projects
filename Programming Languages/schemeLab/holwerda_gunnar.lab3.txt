Question 1: Run this function as (f '(3 1 4 1 5 9)). What output do you get?
(4 2 5 2 6 10)

Question 2: What does this function f do?
It adds 1 to each element in the list

Question 3: Give a comment that explains the following line (a)
; Check if we have empty list

Question 4: Give a comment that explains the following line (b)
; If we have empty list, return an empty list

Question 5: Give a comment that explains the following line (c)
; Else add 1 to the first item in the list and then recursively call f on the rest of the list

Question 6: Trace the call given in Question 1, showing each recursive call to the function. Specifically show each call, expanding the term lst to specific lists or atoms at each depth of the recursion.
(cons (4) (f ( 1 4 1 5 9)))
	(cons (2) (f (4 1 5 9)))
		(cons (5) (f (1 5 9)))
			(cons (2) (f (5 9)))
				(cons (6) (f (9)))
					(cons (10) (f ()))
						()
					(10)
				(6 10)
			(2 6 10)
		(5 2 6 10)
	(2 5 2 6 10)
(4 2 5 2 6 10)

Question 7: What output do you get for the call (member? 'one '(1 2 3 4))?
#f

Question 8: Does your member? function use head or tail recursion?
tail

Question 9: What output do you get for the call (set? '(it was the best of times, it was the worst of times))?
#f

Question 10: Research tail recursion. Describe, in a few short senteces, why it can be beneficial to write tail recursing functions.
When using tail recursion you know that there is nothing else that is going to happen when your function returns. So it allows the compiler to do some optimizations for the stack so that it wouldn't have to use a hundred stack frames from each recursive call

Question 11: What output do you get for the call: (union '(green eggs and) '(ham))?
(and eggs green ham)

Question 12: What output do you get for the call: (intersect '(stewed tomatoes and macaroni) '(macaroni and cheese))?
(and macaroni)

Question 13: Name something you like about Scheme. Explain.
It has very nice way of managing and manipulating lists.

Question 14: Name something you dislike about Scheme. Explain.
It isn't like a conventional programming language. You kind of have to relearn how to program when you work with a functional language.

Question 15: Did you enjoy this lab? What aspects did you like and/or dislike?
I liked the length.

Question 16: Approximately how many hours did you spend on this lab?
1.5 hrs

Question 17: Do you think you will use Scheme again? For which type(s) of project(s)?
No. Not a fan.